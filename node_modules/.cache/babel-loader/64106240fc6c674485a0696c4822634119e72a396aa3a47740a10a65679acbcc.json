{"ast":null,"code":"// 模拟的行程数据\nconst mockTrips = [{\n  id: 1,\n  title: '北京三日游',\n  destination: '北京',\n  startDate: '2023-05-01',\n  endDate: '2023-05-03',\n  travelType: 'self'\n}, {\n  id: 2,\n  title: '上海周末行',\n  destination: '上海',\n  startDate: '2023-06-10',\n  endDate: '2023-06-12',\n  travelType: 'self'\n}, {\n  id: 3,\n  title: '广州美食之旅',\n  destination: '广州',\n  startDate: '2023-07-15',\n  endDate: '2023-07-20',\n  travelType: 'group'\n}, {\n  id: 4,\n  title: '杭州西湖游',\n  destination: '杭州',\n  startDate: '2023-08-05',\n  endDate: '2023-08-07',\n  travelType: 'self'\n}, {\n  id: 5,\n  title: '成都休闲游',\n  destination: '成都',\n  startDate: '2023-09-20',\n  endDate: '2023-09-25',\n  travelType: 'business'\n}];\n\n// 获取所有行程\nexport const getAllTrips = () => {\n  return new Promise(resolve => {\n    // 模拟网络延迟\n    setTimeout(() => {\n      resolve(mockTrips);\n    }, 500);\n  });\n};\n\n// 根据ID获取行程\nexport const getTripById = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const trip = mockTrips.find(trip => trip.id === id);\n      if (trip) {\n        resolve(trip);\n      } else {\n        reject(new Error('未找到行程'));\n      }\n    }, 500);\n  });\n};\n\n// 创建新行程\nexport const createTrip = tripData => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const newTrip = {\n        id: mockTrips.length + 1,\n        ...tripData\n      };\n      // 在实际应用中，这里会将数据发送到服务器\n      mockTrips.push(newTrip);\n      resolve(newTrip);\n    }, 500);\n  });\n};","map":{"version":3,"names":["mockTrips","id","title","destination","startDate","endDate","travelType","getAllTrips","Promise","resolve","setTimeout","getTripById","reject","trip","find","Error","createTrip","tripData","newTrip","length","push"],"sources":["D:/all_code/travel_assistant/src/api/tripService.js"],"sourcesContent":["// 模拟的行程数据\r\nconst mockTrips = [\r\n  { id: 1, title: '北京三日游', destination: '北京', startDate: '2023-05-01', endDate: '2023-05-03', travelType: 'self' },\r\n  { id: 2, title: '上海周末行', destination: '上海', startDate: '2023-06-10', endDate: '2023-06-12', travelType: 'self' },\r\n  { id: 3, title: '广州美食之旅', destination: '广州', startDate: '2023-07-15', endDate: '2023-07-20', travelType: 'group' },\r\n  { id: 4, title: '杭州西湖游', destination: '杭州', startDate: '2023-08-05', endDate: '2023-08-07', travelType: 'self' },\r\n  { id: 5, title: '成都休闲游', destination: '成都', startDate: '2023-09-20', endDate: '2023-09-25', travelType: 'business' }\r\n];\r\n\r\n// 获取所有行程\r\nexport const getAllTrips = () => {\r\n  return new Promise((resolve) => {\r\n    // 模拟网络延迟\r\n    setTimeout(() => {\r\n      resolve(mockTrips);\r\n    }, 500);\r\n  });\r\n};\r\n\r\n// 根据ID获取行程\r\nexport const getTripById = (id) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const trip = mockTrips.find(trip => trip.id === id);\r\n      if (trip) {\r\n        resolve(trip);\r\n      } else {\r\n        reject(new Error('未找到行程'));\r\n      }\r\n    }, 500);\r\n  });\r\n};\r\n\r\n// 创建新行程\r\nexport const createTrip = (tripData) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      const newTrip = {\r\n        id: mockTrips.length + 1,\r\n        ...tripData\r\n      };\r\n      // 在实际应用中，这里会将数据发送到服务器\r\n      mockTrips.push(newTrip);\r\n      resolve(newTrip);\r\n    }, 500);\r\n  });\r\n}; "],"mappings":"AAAA;AACA,MAAMA,SAAS,GAAG,CAChB;EAAEC,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,OAAO;EAAEC,WAAW,EAAE,IAAI;EAAEC,SAAS,EAAE,YAAY;EAAEC,OAAO,EAAE,YAAY;EAAEC,UAAU,EAAE;AAAO,CAAC,EAChH;EAAEL,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,OAAO;EAAEC,WAAW,EAAE,IAAI;EAAEC,SAAS,EAAE,YAAY;EAAEC,OAAO,EAAE,YAAY;EAAEC,UAAU,EAAE;AAAO,CAAC,EAChH;EAAEL,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,QAAQ;EAAEC,WAAW,EAAE,IAAI;EAAEC,SAAS,EAAE,YAAY;EAAEC,OAAO,EAAE,YAAY;EAAEC,UAAU,EAAE;AAAQ,CAAC,EAClH;EAAEL,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,OAAO;EAAEC,WAAW,EAAE,IAAI;EAAEC,SAAS,EAAE,YAAY;EAAEC,OAAO,EAAE,YAAY;EAAEC,UAAU,EAAE;AAAO,CAAC,EAChH;EAAEL,EAAE,EAAE,CAAC;EAAEC,KAAK,EAAE,OAAO;EAAEC,WAAW,EAAE,IAAI;EAAEC,SAAS,EAAE,YAAY;EAAEC,OAAO,EAAE,YAAY;EAAEC,UAAU,EAAE;AAAW,CAAC,CACrH;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B;IACAC,UAAU,CAAC,MAAM;MACfD,OAAO,CAACT,SAAS,CAAC;IACpB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMW,WAAW,GAAIV,EAAE,IAAK;EACjC,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEG,MAAM,KAAK;IACtCF,UAAU,CAAC,MAAM;MACf,MAAMG,IAAI,GAAGb,SAAS,CAACc,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACZ,EAAE,KAAKA,EAAE,CAAC;MACnD,IAAIY,IAAI,EAAE;QACRJ,OAAO,CAACI,IAAI,CAAC;MACf,CAAC,MAAM;QACLD,MAAM,CAAC,IAAIG,KAAK,CAAC,OAAO,CAAC,CAAC;MAC5B;IACF,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAIC,QAAQ,IAAK;EACtC,OAAO,IAAIT,OAAO,CAAEC,OAAO,IAAK;IAC9BC,UAAU,CAAC,MAAM;MACf,MAAMQ,OAAO,GAAG;QACdjB,EAAE,EAAED,SAAS,CAACmB,MAAM,GAAG,CAAC;QACxB,GAAGF;MACL,CAAC;MACD;MACAjB,SAAS,CAACoB,IAAI,CAACF,OAAO,CAAC;MACvBT,OAAO,CAACS,OAAO,CAAC;IAClB,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}